import isValidURL from './isValidURL';
import appendBadgeLink from './appendBadgeLink';
import CONSTANTS from '../constants/constants';
import { ICompanyContactInfo, IJobOpening, ISalaryEntry } from '../types/types';
import showSummaryModal from './showSummaryModal';
import createSummaryBlock from './createSummaryBlock';
import getCompanyData from './getCompanyData';
import deleteFromStorage from './deleteFromStorage';

const { ICONS, SEARCH_ENGINE_URL } = CONSTANTS;

// Track containers that already have badges to prevent duplicate rendering
const processedContainers = new WeakSet<Element>();

const appendSocialBadges = (
    container: Element,
    className: string,
    details: ICompanyContactInfo,
    vibe: string | null,
    translation: string | null,
    companyName: string,
    salaries: ISalaryEntry[],
    jobs: IJobOpening[]
) => {
    // Prevent duplicate badge rendering for the same container
    if (processedContainers.has(container)) {
        return;
    }

    // Mark container as processed
    processedContainers.add(container);

    const { website, linkedin, facebook, github, email } = details;

    if (website && isValidURL(website)) {
        appendBadgeLink(container, website, ICONS.WEB, null, className);
    } else {
        const ddgUrl = `${SEARCH_ENGINE_URL}${encodeURIComponent(companyName + ' official site')}`;
        appendBadgeLink(
            container,
            ddgUrl,
            ICONS.SEARCH,
            'DuckDuckGo Search',
            'visit-social-badge'
        );
    }

    if (linkedin)
        appendBadgeLink(
            container,
            linkedin,
            ICONS.LINKEDIN,
            null,
            'visit-social-badge'
        );
    if (facebook)
        appendBadgeLink(
            container,
            facebook,
            ICONS.FACEBOOK,
            null,
            'visit-social-badge'
        );
    if (github)
        appendBadgeLink(
            container,
            github,
            ICONS.GITHUB,
            null,
            'visit-social-badge'
        );
    if (email)
        appendBadgeLink(
            container,
            `mailto:${email}`,
            ICONS.EMAIL,
            null,
            'visit-social-badge'
        );

    if (vibe) {
        const summaryLink = appendBadgeLink(
            container,
            '#',
            ICONS.SUMMARY,
            null,
            'visit-social-badge'
        );

        // Prevent multiple event listeners on the same summary link
        let summaryClickHandlerAdded = false;

        if (!summaryClickHandlerAdded) {
            summaryLink.addEventListener('click', async (e) => {
                e.preventDefault();

                const loadingHTML = '<p>Loading AI summary...</p>';
                showSummaryModal(loadingHTML);

                try {
                    // Use createSummaryBlock with proper props
                    const summaryElement = createSummaryBlock({
                        title: 'AI Review Summary',
                        subtitle: '',
                        description:
                            'Summarized reviews in English and translated with Gemini.',
                        main: `
                            <p><strong>English:</strong> ${vibe}</p>
                            ${translation ? `<p><strong>Bangla:</strong> ${translation}</p>` : ''}
                        `,
                        footer: 'Generated by Gemini Flash API',
                    });

                    // Convert HTMLElement to string using temporary container
                    const tempContainer = document.createElement('div');
                    tempContainer.appendChild(summaryElement);
                    const summaryHTML = tempContainer.innerHTML;

                    // Show modal with rendered content
                    showSummaryModal(summaryHTML);
                } catch (err) {
                    console.error('Failed to fetch AI summary:', err);
                    showSummaryModal('<p>Error fetching summary.</p>');
                }
            });

            summaryClickHandlerAdded = true;
        }
    }

    // inside your appendSocialBadges (or wherever you handle salaries):
    if (salaries?.length) {
        const salaryLink = appendBadgeLink(
            container,
            '#',
            ICONS.SALARY,
            null,
            'visit-social-badge'
        );

        // Prevent multiple event listeners on the same salary link
        let salaryClickHandlerAdded = false;
        if (!salaryClickHandlerAdded) {
            salaryLink.addEventListener('click', async (e) => {
                e.preventDefault();

                const loadingHTML = '<p>Loading salary details...</p>';
                showSummaryModal(loadingHTML);

                try {
                    const spansHtml = salaries?.map(
                        ({ position, salaryRange }) =>
                            `<span class='d-flex align-items-center'>
                                    <strong class="mt-0 d-flex align-items-center gap-2">${position}: </strong> ${salaryRange}
                                </span>`
                    );

                    // Use createSummaryBlock with proper props
                    const salaryElement = createSummaryBlock({
                        title: `${companyName} Salary Details`,
                        subtitle: '',
                        description: `Summarized the salary of ${companyName} with Gemini.`,
                        main: `<div>${spansHtml}</div>`,
                        footer: 'Generated by Gemini Flash API',
                    });

                    // Convert HTMLElement to string using temporary container
                    const tempContainer = document.createElement('div');
                    tempContainer.appendChild(salaryElement);
                    const summaryHTML = tempContainer.innerHTML;

                    // Show modal with rendered content
                    showSummaryModal(summaryHTML);
                } catch (err) {
                    console.error('Failed to fetch AI summary:', err);
                    showSummaryModal('<p>Error fetching summary.</p>');
                }
            });

            salaryClickHandlerAdded = true;
        }
    }

    // inside your appendSocialBadges (or wherever you handle salaries):
    if (jobs?.length) {
        const jobsLink = appendBadgeLink(
            container,
            '#',
            ICONS.JOBS,
            null,
            'visit-social-badge'
        );

        // Prevent multiple event listeners on the same salary link
        let JobsClickHandlerAdded = false;
        if (!JobsClickHandlerAdded) {
            jobsLink.addEventListener('click', async (e) => {
                e.preventDefault();

                const loadingHTML = '<p>Loading jobs details...</p>';
                showSummaryModal(loadingHTML);

                try {
                    const spansHtml = jobs?.map(
                        ({ title, location, link }) =>
                            `<a href='${link}' class='d-flex align-items-center'>
                                <strong class='mt-0 d-flex align-items-center gap-2'>${title}: </strong> ${location}
                            </a>`
                    );

                    // Use createSummaryBlock with proper props
                    const salaryElement = createSummaryBlock({
                        title: `${companyName} Jobs Details`,
                        subtitle: '',
                        description: `Summarized the jobs of ${companyName} with Gemini.`,
                        main: `<div>${spansHtml}</div>`,
                        footer: 'Generated by Gemini Flash API',
                    });

                    // Convert HTMLElement to string using temporary container
                    const tempContainer = document.createElement('div');
                    tempContainer.appendChild(salaryElement);
                    const summaryHTML = tempContainer.innerHTML;

                    // Show modal with rendered content
                    showSummaryModal(summaryHTML);
                } catch (err) {
                    console.error('Failed to fetch AI summary:', err);
                    showSummaryModal('<p>Error fetching summary.</p>');
                }
            });

            JobsClickHandlerAdded = true;
        }
    }

    // Fallback search if no contact info
    const hasContact = Object.values(details).some(
        (val) => typeof val === 'string' && val
    );
    if (!hasContact) {
        const ddgUrl = `${SEARCH_ENGINE_URL}${encodeURIComponent(
            companyName + ' official site'
        )}`;
        appendBadgeLink(container, ddgUrl, ICONS.SEARCH, 'Search', className);
    }

    // Refresh badge: forces refetch and rerender
    const refreshLink = appendBadgeLink(
        container,
        '#',
        ICONS.REFRESH,
        null,
        className
    );
    refreshLink.addEventListener('click', async (e) => {
        e.preventDefault();
        // Invalidate cache
        deleteFromStorage(companyName);
        processedContainers.delete(container);
        // Remove existing badges
        container
            .querySelectorAll(`.${className}, .visit-badge`)
            .forEach((el) => el.remove());
        // Fetch fresh data and rerender
        try {
            const data = await getCompanyData(companyName);
            appendSocialBadges(
                container,
                className,
                data.details,
                data.enSummary,
                data.bnSummary,
                companyName,
                data.salaries,
                data.jobs
            );
        } catch (err) {
            console.error('Refresh failed for', companyName, err);
        }
    });
};

export default appendSocialBadges;
