import isValidURL from './isValidURL';
import appendBadgeLink from './appendBadgeLink';
import CONSTANTS from '../constants/constants';
import { ICompanyContactInfo } from '../types/types';
import showSummaryModal from './showSummaryModal';
import createSummaryBlock from './createSummaryBlock';

const { ICONS, SEARCH_ENGINE_URL } = CONSTANTS;

// Track containers that already have badges to prevent duplicate rendering
const processedContainers = new WeakSet<Element>();

const appendSocialBadges = (
    container: Element,
    details: ICompanyContactInfo,
    vibe: string | null,
    translation: string | null,
    companyName: string
) => {
    // Prevent duplicate badge rendering for the same container
    if (processedContainers.has(container)) {
        return;
    }

    // Mark container as processed
    processedContainers.add(container);

    const { website, linkedin, facebook, github, email } = details;

    if (website && isValidURL(website)) {
        appendBadgeLink(
            container,
            website,
            ICONS.WEB,
            null,
            'visit-social-badge'
        );
    } else {
        const ddgUrl = `${SEARCH_ENGINE_URL}${encodeURIComponent(companyName + ' official site')}`;
        appendBadgeLink(
            container,
            ddgUrl,
            ICONS.SEARCH,
            'DuckDuckGo Search',
            'visit-badge'
        );
    }

    if (linkedin)
        appendBadgeLink(
            container,
            linkedin,
            ICONS.LINKEDIN,
            null,
            'visit-social-badge'
        );
    if (facebook)
        appendBadgeLink(
            container,
            facebook,
            ICONS.FACEBOOK,
            null,
            'visit-social-badge'
        );
    if (github)
        appendBadgeLink(
            container,
            github,
            ICONS.GITHUB,
            null,
            'visit-social-badge'
        );
    if (email)
        appendBadgeLink(
            container,
            `mailto:${email}`,
            ICONS.EMAIL,
            null,
            'visit-social-badge'
        );

    if (vibe) {
        const summaryLink = appendBadgeLink(
            container,
            '#',
            ICONS.SUMMARY,
            null,
            'visit-social-badge'
        );

        // Prevent multiple event listeners on the same summary link
        let summaryClickHandlerAdded = false;

        if (!summaryClickHandlerAdded) {
            summaryLink.addEventListener('click', async (e) => {
                e.preventDefault();

                const loadingHTML = '<p>Loading AI summary...</p>';
                showSummaryModal(loadingHTML);

                try {
                    // Use createSummaryBlock with proper props
                    const summaryElement = createSummaryBlock({
                        title: 'AI Review Summary',
                        subtitle: '',
                        description:
                            'Summarized reviews in English and translated with Gemini.',
                        main: `
                            <p><strong>English:</strong> ${vibe}</p>
                            ${translation ? `<p><strong>Bangla:</strong> ${translation}</p>` : ''}
                        `,
                        footer: 'Generated by Gemini Flash API',
                    });

                    // Convert HTMLElement to string using temporary container
                    const tempContainer = document.createElement('div');
                    tempContainer.appendChild(summaryElement);
                    const summaryHTML = tempContainer.innerHTML;

                    // Show modal with rendered content
                    showSummaryModal(summaryHTML);
                } catch (err) {
                    console.error('Failed to fetch AI summary:', err);
                    showSummaryModal('<p>Error fetching summary.</p>');
                }
            });

            summaryClickHandlerAdded = true;
        }
    }

    // Only add search badge if no other contact info is available
    const hasAnyValue = Object.values(details).some(
        (val): val is string => typeof val === 'string' && val !== ''
    );
    if (!hasAnyValue) {
        const ddgUrl = `${SEARCH_ENGINE_URL}${encodeURIComponent(companyName + ' official site')}`;
        appendBadgeLink(
            container,
            ddgUrl,
            ICONS.SEARCH,
            'Search',
            'visit-badge'
        );
    }
};

export default appendSocialBadges;
